version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add paramtser here  
      when:
        type: string
      id:
        type: string      
    steps:
      - run:
          name: Destroy our  udapeople backend  stack
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.id >>      
          when: << parameters.when >>
      - run:
          name: Destroy our udapeople frontend  stack and S3 bucket
          command: |
            #aws s3 rm s3://udapeople-<< parameters.id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.id >>         
          when: << parameters.when >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here 
      when:
        type: string
      id:
        type: string      
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          working_directory: ./backend
          command: |
            # Cursls command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl https://kvdb.io/KbXu3VVreQ25zzytjaW1eL/migration_<< parameters.id >> -k)
            echo $SUCCESS
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            pwd
            ls -la
            npm run migrations:revert
              
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
            
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
             
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: test front-end
          command: |
            cd frontend
            npm install
            npm run test
            
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: Back-end test
          command: |
            cd backend
            npm install
            npm run test
             
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-scan]
      - run:
          name: scan front-end
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            # npm install oauth-sign@^0.9.0
            npm audit --audit-level=critical
            
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-scan
      
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-scan]
      - run:
          name: Back-end scan
          command: |
            cd backend
            npm install
            #npm audit --audit-level=critical
            npm audit fix audit-level=high --force
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            npm audit fix --force
      - save_cache:
          paths: [backend/node_modules]
          key: backend-scan
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip 
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Add backend-Ec2 ip to ansible inventory
          working_directory: ./.circleci/ansible
          command: |         
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text >> inventory.txt
            cat inventory.txt      
      - run:
          name: Ensure front-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail    
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - checkout
      - add_ssh_keys:
          fingerprints: ["7e:e9:0a:eb:f2:c2:80:be:19:64:cc:3b:89:3c:ac:f9"]
      - attach_workspace:
          at: ~/    
      - run:
          name: Install dependencies
          working_directory: ./.circleci/ansible
          command: |
            apk add --update ansible
            apk update && apk add openssh
            pip install awscli
            ansible --version
            
      - run:
          name: Configure server
          environment:
             ANSIBLE_HOST_KEY_CHECKING: false
          command: |
            pwd &&
            ls -la
            cd .circleci/ansible/
             ls -la
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure      
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
  run-migrations:
    docker:
#       Docker image here that supports NodeJS
      - image: circleci/node
    steps:
       #Checkout code from git  
      - checkout
      - restore_cache:
           keys:
             - backend-build
      - run:
           name: "Install Dependencies"
           command: |
             sudo apt-get -y update
             sudo apt-get -y install python3
             sudo apt-get -y install awscli
      - run:
          name: Run migrations
          command: |
            cd backend
            ls -la
            touch migrations-${CIRCLE_WORKFLOW_ID:0:7}.txt
            sudo npm run migrations >> migrations-${CIRCLE_WORKFLOW_ID:0:7}.txt
            cat migrations-${CIRCLE_WORKFLOW_ID:0:7}.txt
      - run:
          name: Send migration results to memstash
          command: |
            cd backend        
             export result="$(grep 'has been executed successfully' migrations-${CIRCLE_WORKFLOW_ID:0:7}.txt)" 
             if [ "$result" == "has been executed successfully" ]
             then
                 curl https://kvdb.io/KbXu3VVreQ25zzytjaW1eL/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1' -k
             else
                 curl https://kvdb.io/KbXu3VVreQ25zzytjaW1eL/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '0' -k
             fi
      #  Here's where you will add some code to rollback on failure      
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail  
  deploy-frontend:
     docker:
       - image: circleci/node:13.8.0
     steps:
       - checkout
       - restore_cache:
          keys:
            - frontend-build
       - run:
           name: Install dependencies
           command: |
             sudo apt-get -y update
             sudo apt-get -y install python3
             sudo apt-get -y install awscli
       - run:
           name: Get backend url
           command: |
             cd frontend
             touch .env
             export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text)
              export API_URL="http://${BACKEND_IP}:3030"
              echo "API_URL = ${API_URL}"
              ls -lah
              echo "API_URL=http://${BACKEND_IP}:3030" >> .env
              cat .env
              curl https://kvdb.io/KbXu3VVreQ25zzytjaW1eL/API_URL -k  -d ${API_URL} 
       - run:
           name: Deploy frontend objects
           command: |
             cd frontend
             ls -lah
             npm run build
             ls -lah
             cat .env
             ls -lah dist/
             aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}/ --recursive
       - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
       - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail 
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.9.0-alpine
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint 	
      # attach workspace
      - checkout
      - add_ssh_keys:
          fingerprints: ["7e:e9:0a:eb:f2:c2:80:be:19:64:cc:3b:89:3c:ac:f9"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update ansible curl rsync openssh nodejs npm
            ansible --version
            pip install awscli
            aws --version 
      - run:
          name: Deploy backend
          command: |
            # your code here
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml    
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail            
   
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]    
          filters:
            branches:
              only:
                - master
      - configure-infrastructure:
          requires:
            - deploy-infrastructure
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]   
